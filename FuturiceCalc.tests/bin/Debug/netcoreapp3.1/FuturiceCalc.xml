<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FuturiceCalc</name>
    </assembly>
    <members>
        <member name="T:FuturiceCalc.Controllers.CalculusController">
            <summary>
            this provides end points for calculus 
            </summary>
        </member>
        <member name="M:FuturiceCalc.Controllers.CalculusController.EvaluateExpression(System.String)">
            <summary>
            Evaluates a given mathematical expression for the allowed operations + - * / ( ) 
            </summary>
            <param name="calculusParam">base 64 encoded expression</param>
            <returns> decimal response of the mathematical expression</returns>
        </member>
        <member name="T:FuturiceCalc.Controllers.CalculusControllerV2">
            <summary>
            this provides end points for calculus 
            </summary>
        </member>
        <member name="M:FuturiceCalc.Controllers.CalculusControllerV2.EvaluateExpression(System.String)">
            <summary>
            Evaluates a given mathematical expression for the allowed operations + - * / ( ) 
            </summary>
            <param name="calculusParam">base 64 encoded expression</param>
            <returns> decimal response of the mathematical expression</returns>
        </member>
        <member name="T:FuturiceCalc.Infrastructure.Attributes.QueryBase64DecodeAttribute">
            <summary>
            attribute for decoding base 64 input string
            </summary>
        </member>
        <member name="M:FuturiceCalc.Infrastructure.Attributes.QueryBase64DecodeAttribute.IsBase64String(System.String)">
            <summary>
            checks if the expression is valid base 64
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="T:FuturiceCalc.Infrastructure.Extensions.ConfigureServicesExtensions">
            <summary>
            extension method to register services, so startup is not over populated
            </summary>
        </member>
        <member name="M:FuturiceCalc.Infrastructure.Extensions.ConfigureServicesExtensions.AddSwaggerServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            registers swagger services
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:FuturiceCalc.Infrastructure.Extensions.ConfigureServicesExtensions.AddApplicationDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            registers custom application services
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:FuturiceCalc.Infrastructure.Middlewares.ExceptionHandlingMiddleware">
            <summary>
            handles exception generated in the app
            </summary>
        </member>
        <member name="T:FuturiceCalc.Models.EvaluatedExpressionResponse">
            <summary>
            response for evaluated expression
            </summary>
        </member>
        <member name="T:FuturiceCalc.Services.CalculusService">
            <summary>
            service that implements functions related to calculus
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.CalculusService.EvaluateExpression(System.String)">
            <summary>
            using ncalc library to evaluate expression
            </summary>
            <param name="expression">simplified calculus expression</param>
            <returns>evaluated response in decimal</returns>
        </member>
        <member name="T:FuturiceCalc.Services.CalculusServiceV2">
            <summary>
            v2 service that implements functions related to calculus
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.CalculusServiceV2.EvaluateExpression(System.String)">
            <summary>
            using stacks to evaluate expression
            </summary>
            <param name="expression">simplified calculus expression</param>
            <returns>evaluated response in decimal</returns>
        </member>
        <member name="M:FuturiceCalc.Services.CalculusServiceV2.EvaluateStackValues(System.Collections.Generic.List{System.String})">
            <summary>
            evaluates the stack if the items are more and equal to three
            </summary>
            <param name="listToHoldExpressionAndResult"></param>
        </member>
        <member name="M:FuturiceCalc.Services.CalculusServiceV2.ResolveBrackets(System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            based on the occurrence of brackets, resolves them and add the bracket expression to the stack
            </summary>
            <param name="expression">expression to be evaluated</param>
            <param name="i">current index</param>
            <param name="listToHoldExpressionAndResult"></param>
            <returns></returns>
        </member>
        <member name="T:FuturiceCalc.Services.Contracts.ICalculusService">
            <summary>
            interface to hold functions related to calculus
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.Contracts.ICalculusService.EvaluateExpression(System.String)">
            <summary>
            use ncalc library to evaluate expression
            </summary>
            <param name="expression">simplified calculus expression</param>
            <returns>evaluated response in decimal</returns>
        </member>
        <member name="T:FuturiceCalc.Services.Contracts.ICalculusServiceV2">
            <summary>
            V2 interface to hold functions related to calculus
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.Contracts.ICalculusServiceV2.EvaluateExpression(System.String)">
            <summary>
            using stacks to evaluate expression
            </summary>
            <param name="expression">simplified calculus expression</param>
            <returns>evaluated response in decimal</returns>
        </member>
        <member name="T:FuturiceCalc.Services.Contracts.ILoggingFacade">
            <summary>
            facade to log errors and info
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.Contracts.ILoggingFacade.LogError(System.Exception)">
            <summary>
            logs error
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:FuturiceCalc.Services.Contracts.ILoggingFacade.LogInfo(System.String)">
            <summary>
            logs infor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:FuturiceCalc.Services.Contracts.IOperatorValidationService">
            <summary>
            interface for operator validation
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.Contracts.IOperatorValidationService.CheckForValidOperatorValidation(System.String)">
            <summary>
            checks for validation for given operators in a given string
            </summary>
            <param name="expressionToBeValidated">expression to be validated for given operators</param>
            <returns>if the validation succeeded or failed</returns>
        </member>
        <member name="T:FuturiceCalc.Services.LoggingFacade">
            <summary>
            implements custom log facade
            </summary>
        </member>
        <member name="T:FuturiceCalc.Services.OperatorValidationService">
            <summary>
            class that implements OperatorValidationService interface
            </summary>
        </member>
        <member name="M:FuturiceCalc.Services.OperatorValidationService.CheckForValidOperatorValidation(System.String)">
            <summary>
            checks for validation for given operators in a given string
            </summary>
            <param name="expressionToBeValidated">expression to be validated for given operators</param>
            <returns>if the validation succeeded or failed</returns>
        </member>
        <member name="M:FuturiceCalc.Services.OperatorValidationService.CheckForValidBrackets(System.String)">
            <summary>
            checks for brackets validation for given operators in a given string
            </summary>
            <param name="expressionToBeValidated">expression to be validated for given operators</param>
            <returns>if the validation succeeded or failed</returns>
        </member>
    </members>
</doc>
